name: continuous-integration-action
author: jsalazar
description: Action for continuous integration
inputs:
  #Runtime options
  ENABLE: 
    description: Enable sentinel
    type: bool
    default: true
  FORCE:
    description: Npm install needs force flag
    type: bool
    default: false
  GITHUB_TOKEN:
    description: Github token
    required: true
  RUNTIME_VERSION:
    description: Runtime version
    default: node
    type: choice
    options:
      - 16
      - 18 
      - 20
  RUNTIME:
    description: Runtime of the application
    default: node
    type: choice
    options:
      - node
  LANGUAGE:
    description: Language of the application
    default: typescript
    type: choice
    options:
      - javascript
      - typescript
      - python

  #Testing options
  COVERAGE_PATH:
    description: Results coverage path
    required: false
    default: ./coverage/coverage-summary.json
    type: string
  #Sonarqube options
  SONAR_PROJECT_NAME:
    description: Sonarqube project name
    required: true
  SONAR_HOST_URL:
    description: Sonarqube host url
    required: true
  SONARQUBE_TOKEN:
    description: Sonarqube token
    required: true
  SONAR_TEST_INCLUSIONS:
    description: Sonarqube test inclusions
    required: false
    default: '**/*.spec.ts'
  SONAR_LCOV_PATH:
    description: Sonarqube coverage path
    required: false
    default: ./coverage/lcov.info
  MIN_COVERAGE_VALUE:
    description: Minimum coverage value
    required: false
    default: 95
    type: integer
  MIN_BUGS_VALUE:
    description: Minimum bugs value
    required: false
    default: 0
    type: integer
  MIN_HOTSPOTS_VALUE:
    description: Minimum hotspots value
    required: false
    default: 0
    type: integer
  MIN_EFFORT_VALUE:
    description: Minimum effort value
    required: false
    default: 60
    type: integer
env:
  COVERAGE_VALUE: 0
  BUGS_VALUE: 0
  HOTSPOTS_VALUE: 0
  EFFORT_VALUE: 0


runs:
  using: composite
  steps:
    - uses: actions/checkout@v3

    - name: Is sentinel enabled
      if: ${{ inputs.ENABLE == 'true' }}
      run: echo "Sentinel enabled "
      shell: bash

    - name: Setup Node.js
      if: ${{ inputs.ENABLE == 'true' }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.RUNTIME_VERSION }}
        cache: npm

    - name: Install dependencies and Test
      if: ${{ inputs.ENABLE == 'true' }}
      run: |
        if [[ "${{ inputs.FORCE }}" == false ]]; then
          npm ci
          else
            npm install --legacy-peer-deps
          fi
          npm run test:coverage
      shell: bash

    - name: Collect coverage
      if: ${{ inputs.ENABLE == 'true' }}
      id: results
      uses: MishaKav/jest-coverage-comment@main
      with:
        coverage-summary-path: ${{  inputs.COVERAGE_PATH  }}
        title: Coverage results
        summary-title: Coverage Summary Results
        badge-title: Coverage
        hide-comment: false
        create-new-comment: false
        hide-summary: false
    - name: Monitor coverage
      if: ${{ inputs.ENABLE == 'true' }}
      uses: slavcodev/coverage-monitor-action@v1
      with:
        github_token: ${{ inputs.GITHUB_TOKEN}}
        coverage_path: ${{  inputs.COVERAGE_PATH  }}
        threshold_alert: 80
        threshold_warning: ${{ inputs.MIN_COVERAGE_VALUE }}
        threshold_metric: "statements"
        comment_footer: false
    - name: Setup sonarqube
      if: ${{ inputs.ENABLE == 'true' }}
      uses: warchant/setup-sonar-scanner@v5
    - name: Run sonarqube
      if: ${{ inputs.ENABLE == 'true' }}
      run: |
        #!/bin/bash
        SONAR_CMD="sonar-scanner -Dsonar.projectKey=${{inputs.SONAR_PROJECT_NAME}} -Dsonar.sourceEncoding=UTF-8 -Dsonar.sources=src/ -Dsonar.tests=src/ -Dsonar.test.inclusions=${{inputs.SONAR_TEST_INCLUSIONS}} -Dsonar.projectName=${{inputs.SONAR_PROJECT_NAME}} -Dsonar.host.url=${{ inputs.SONAR_HOST_URL }} -Dsonar.login=${{ inputs.SONARQUBE_TOKEN }}"

        # Add language specific options to the sonarqube command

        if [[ "${{ inputs.LANGUAGE }}" == "typescript" ]]; then
          SONAR_CMD="$SONAR_CMD -Dsonar.typescript.lcov.reportPaths=${{ inputs.SONAR_LCOV_PATH }}"
        fi

        if [[ "${{ inputs.LANGUAGE }}" == "javascript" ]]; then
          SONAR_CMD="$SONAR_CMD -Dsonar.javascript.lcov.reportPaths=${{ inputs.SONAR_LCOV_PATH }}"
        fi

        echo "Running SonarQube Scanner with command: $SONAR_CMD"
        eval $SONAR_CMD

      shell: bash
    - name: Get sonarqube coverage history
      if: ${{ inputs.ENABLE == 'true' }}
      run: |
          # execute curl command and get the output value using jq
          coverage_value=$(curl -G --data-urlencode "component=${{inputs.SONAR_PROJECT_NAME}}" --data-urlencode "metrics=coverage" -s -u ${{ inputs.SONARQUBE_TOKEN }}: ${{ inputs.SONAR_HOST_URL }}/api/measures/search_history | jq -r ".measures[0].history[-1].value")
          bugs_vulnerability=$(curl -G --data-urlencode "componentKeys=${{inputs.SONAR_PROJECT_NAME}}" --data-urlencode "types=BUG,VULNERABILITY" --data-urlencode "statuses=OPEN,REOPENED" -s -u ${{ inputs.SONARQUBE_TOKEN }}: ${{ inputs.SONAR_HOST_URL }}/api/issues/search | jq -r ".total")
          hotspots=$(curl -G --data-urlencode "projectKey=${{inputs.SONAR_PROJECT_NAME}}" -s -u ${{ inputs.SONARQUBE_TOKEN }}: ${{ inputs.SONAR_HOST_URL }}/api/hotspots/search | jq -r ".paging.total")
          effort_total=$(curl -G --data-urlencode "componentKeys=${{inputs.SONAR_PROJECT_NAME}}" --data-urlencode "types=CODE_SMELL" --data-urlencode "statuses=OPEN,REOPENED" -s -u ${{ inputs.SONARQUBE_TOKEN }}: ${{ inputs.SONAR_HOST_URL }}/api/issues/search | jq -r ".effortTotal")
          # print the coverage value
          echo "COVERAGE_VALUE=$coverage_value" >> $GITHUB_ENV
          echo "BUGS_VALUE=$bugs_vulnerability" >> $GITHUB_ENV
          echo "HOTSPOTS_VALUE=$hotspots" >> $GITHUB_ENV
          echo "EFFORT_VALUE=$effort_total" >> $GITHUB_ENV
      shell: bash
    - uses: mshick/add-pr-comment@v2
      with:
          message: |
            🐺🐺 Resume of results  🐺🐺
            📕Coverage: ${{ env.COVERAGE_VALUE }}
            🐛Bugs: ${{ env.BUGS_VALUE }}
            🚓Security Hotspots : ${{ env.HOTSPOTS_VALUE }}
            💻Debt: ${{ env.EFFORT_VALUE }}
    - name: Check Coverage
      if: ${{ inputs.ENABLE == 'true' }}
      run: | 
        result=$(awk -v n1=${{inputs.MIN_COVERAGE_VALUE}} -v n2="$COVERAGE_VALUE" 'BEGIN {print (n1 > n2)}')
        if [[ $result -eq 1 ]]; then
          echo "The minimun coverage is "${{ inputs.MIN_COVERAGE_VALUE }}" and you coverage is "${{ env.COVERAGE_VALUE }}
          exit 1
        else
          echo "Terrific! you coverage its over 95"
        fi
      shell: bash
    - name: Check Bugs
      if: ${{ inputs.ENABLE == 'true' }}
      run: |
        echo "BUGS_VALUE: ${{ env.BUGS_VALUE }}"
        echo "MIN_BUGS_VALUE: ${{ inputs.MIN_BUGS_VALUE }}"
        
        result=$(awk -v n1="${{ env.BUGS_VALUE }}" -v n2="${{ inputs.MIN_BUGS_VALUE }}" 'BEGIN {print (n1 > n2)}')
        echo "Result: $result"

        if [[ "$result" -eq 1 ]]; then
          echo "There are some bugs to review."
          echo "Number of bugs: ${{ env.BUGS_VALUE }}"
          echo "Allowed bugs: ${{ inputs.MIN_BUGS_VALUE }}"
          exit 1
        else
          echo "Terrific! Your bugs are okay."
        fi

      shell: bash
    - name: Check Hotspots
      if: ${{ inputs.ENABLE == 'true' }}
      run: |
        result=$(awk -v n1="$HOTSPOTS_VALUE" -v n2="${{ inputs.MIN_HOTSPOTS_VALUE }}" 'BEGIN {print (n1 > n2)}')
        if [[ $result -eq 1 ]]; then
          echo "There are some hotspots to review."
          echo "Number of hotspots: " ${{ env.HOTSPOTS_VALUE }}
          echo "Allowed hotspots: " ${{ inputs.MIN_HOTSPOTS_VALUE }}
          exit 1
        else
          echo "Terrific! your hotspots are ok"
        fi
      shell: bash
    - name: Check Techical debt
      if: ${{ inputs.ENABLE == 'true' }}
      run: |
        result=$(awk -v n1="$EFFORT_VALUE" -v n2="${{ inputs.MIN_EFFORT_VALUE }}" 'BEGIN {print (n1 > n2)}')
        if [[ $result -eq 1 ]]; then
          echo "The debt its greater than  maximum allowed."
          echo "Number of debt in minutes : " ${{ env.EFFORT_VALUE }}
          echo "Allowed debt in minutes: " ${{ inputs.MIN_EFFORT_VALUE }}
          exit 1
        else
          echo "Terrific! your debt it's ok"
        fi
      shell: bash
